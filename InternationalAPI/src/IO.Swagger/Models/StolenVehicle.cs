/*
 * Rekeningrijden Belgium API
 *
 * The international API for Rekeningrijden Belgium
 *
 * OpenAPI spec version: 0.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models;

/// <summary>
/// A stolen vehicle with data needed to identify it on location.
/// </summary>
[DataContract]
public partial class StolenVehicle : IEquatable<StolenVehicle>
{ 
    /// <summary>
    /// Gets or Sets License
    /// </summary>

    [DataMember(Name="license")]
    public string License { get; set; }

    /// <summary>
    /// Gets or Sets Color
    /// </summary>

    [DataMember(Name="color")]
    public string Color { get; set; }

    /// <summary>
    /// Gets or Sets Brand
    /// </summary>

    [DataMember(Name="brand")]
    public string Brand { get; set; }

    /// <summary>
    /// Gets or Sets Model
    /// </summary>

    [DataMember(Name="model")]
    public string Model { get; set; }

    /// <summary>
    /// Gets or Sets Location
    /// </summary>
    [Required]

    [DataMember(Name="location")]
    public Point Location { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class StolenVehicle {\n");
        sb.Append("  License: ").Append(License).Append("\n");
        sb.Append("  Color: ").Append(Color).Append("\n");
        sb.Append("  Brand: ").Append(Brand).Append("\n");
        sb.Append("  Model: ").Append(Model).Append("\n");
        sb.Append("  Location: ").Append(Location).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((StolenVehicle)obj);
    }

    /// <summary>
    /// Returns true if StolenVehicle instances are equal
    /// </summary>
    /// <param name="other">Instance of StolenVehicle to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(StolenVehicle other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;

        return 
            (
                License == other.License ||
                License != null &&
                License.Equals(other.License)
            ) && 
            (
                Color == other.Color ||
                Color != null &&
                Color.Equals(other.Color)
            ) && 
            (
                Brand == other.Brand ||
                Brand != null &&
                Brand.Equals(other.Brand)
            ) && 
            (
                Model == other.Model ||
                Model != null &&
                Model.Equals(other.Model)
            ) && 
            (
                Location == other.Location ||
                Location != null &&
                Location.Equals(other.Location)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (License != null)
                hashCode = hashCode * 59 + License.GetHashCode();
            if (Color != null)
                hashCode = hashCode * 59 + Color.GetHashCode();
            if (Brand != null)
                hashCode = hashCode * 59 + Brand.GetHashCode();
            if (Model != null)
                hashCode = hashCode * 59 + Model.GetHashCode();
            if (Location != null)
                hashCode = hashCode * 59 + Location.GetHashCode();
            return hashCode;
        }
    }

    #region Operators
#pragma warning disable 1591

    public static bool operator ==(StolenVehicle left, StolenVehicle right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(StolenVehicle left, StolenVehicle right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591
    #endregion Operators
}