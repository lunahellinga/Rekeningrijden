/*
 * Rekeningrijden Belgium API
 *
 * The international API for Rekeningrijden Belgium
 *
 * OpenAPI spec version: 0.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models;

/// <summary>
/// A segment of the route
/// </summary>
[DataContract]
public partial class Segment : IEquatable<Segment>
{ 
    /// <summary>
    /// Gets or Sets Time
    /// </summary>

    [DataMember(Name="time")]
    public string? Time { get; set; }

    /// <summary>
    /// Gets or Sets Price
    /// </summary>

    [DataMember(Name="price")]
    public decimal? Price { get; set; }

    /// <summary>
    /// Gets or Sets Start
    /// </summary>

    [DataMember(Name="start")]
    public Node Start { get; set; }

    /// <summary>
    /// Gets or Sets Way
    /// </summary>

    [DataMember(Name="way")]
    public Way Way { get; set; }

    /// <summary>
    /// Gets or Sets End
    /// </summary>

    [DataMember(Name="end")]
    public Node End { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Segment {\n");
        sb.Append("  Time: ").Append(Time).Append("\n");
        sb.Append("  Price: ").Append(Price).Append("\n");
        sb.Append("  Start: ").Append(Start).Append("\n");
        sb.Append("  Way: ").Append(Way).Append("\n");
        sb.Append("  End: ").Append(End).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((Segment)obj);
    }

    /// <summary>
    /// Returns true if Segment instances are equal
    /// </summary>
    /// <param name="other">Instance of Segment to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Segment other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;

        return 
            (
                Time == other.Time ||
                Time != null &&
                Time.Equals(other.Time)
            ) && 
            (
                Price == other.Price ||
                Price != null &&
                Price.Equals(other.Price)
            ) && 
            (
                Start == other.Start ||
                Start != null &&
                Start.Equals(other.Start)
            ) && 
            (
                Way == other.Way ||
                Way != null &&
                Way.Equals(other.Way)
            ) && 
            (
                End == other.End ||
                End != null &&
                End.Equals(other.End)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (Time != null)
                hashCode = hashCode * 59 + Time.GetHashCode();
            if (Price != null)
                hashCode = hashCode * 59 + Price.GetHashCode();
            if (Start != null)
                hashCode = hashCode * 59 + Start.GetHashCode();
            if (Way != null)
                hashCode = hashCode * 59 + Way.GetHashCode();
            if (End != null)
                hashCode = hashCode * 59 + End.GetHashCode();
            return hashCode;
        }
    }

    #region Operators
#pragma warning disable 1591

    public static bool operator ==(Segment left, Segment right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(Segment left, Segment right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591
    #endregion Operators
}