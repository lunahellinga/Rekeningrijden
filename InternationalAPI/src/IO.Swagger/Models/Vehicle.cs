/*
 * Rekeningrijden Belgium API
 *
 * The international API for Rekeningrijden Belgium
 *
 * OpenAPI spec version: 0.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Text;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models;

/// <summary>
/// A vehicle with data needed to detemine road pricing
/// </summary>
[DataContract]
public partial class Vehicle : IEquatable<Vehicle>
{ 
    /// <summary>
    /// The ID of the vehicle in the vehicle&#x27;s country of origin&#x27;s system
    /// </summary>
    /// <value>The ID of the vehicle in the vehicle&#x27;s country of origin&#x27;s system</value>
    [Required]

    [DataMember(Name="id")]
    public Guid? Id { get; set; }

    /// <summary>
    /// Gets or Sets VehicleClassification
    /// </summary>

    [DataMember(Name="vehicleClassification")]
    public VehicleClassification VehicleClassification { get; set; }

    /// <summary>
    /// Gets or Sets FuelType
    /// </summary>
    [Required]

    [DataMember(Name="fuelType")]
    public FuelType FuelType { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class Vehicle {\n");
        sb.Append("  Id: ").Append(Id).Append("\n");
        sb.Append("  VehicleClassification: ").Append(VehicleClassification).Append("\n");
        sb.Append("  FuelType: ").Append(FuelType).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (ReferenceEquals(null, obj)) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((Vehicle)obj);
    }

    /// <summary>
    /// Returns true if Vehicle instances are equal
    /// </summary>
    /// <param name="other">Instance of Vehicle to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Vehicle other)
    {
        if (ReferenceEquals(null, other)) return false;
        if (ReferenceEquals(this, other)) return true;

        return 
            (
                Id == other.Id ||
                Id != null &&
                Id.Equals(other.Id)
            ) && 
            (
                VehicleClassification == other.VehicleClassification ||
                VehicleClassification != null &&
                VehicleClassification.Equals(other.VehicleClassification)
            ) && 
            (
                FuelType == other.FuelType ||
                FuelType != null &&
                FuelType.Equals(other.FuelType)
            );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)
            if (Id != null)
                hashCode = hashCode * 59 + Id.GetHashCode();
            if (VehicleClassification != null)
                hashCode = hashCode * 59 + VehicleClassification.GetHashCode();
            if (FuelType != null)
                hashCode = hashCode * 59 + FuelType.GetHashCode();
            return hashCode;
        }
    }

    #region Operators
#pragma warning disable 1591

    public static bool operator ==(Vehicle left, Vehicle right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(Vehicle left, Vehicle right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591
    #endregion Operators
}