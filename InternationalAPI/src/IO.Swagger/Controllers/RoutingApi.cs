/*
 * Rekeningrijden Belgium API
 *
 * The international API for Rekeningrijden Belgium
 *
 * OpenAPI spec version: 0.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using IO.Swagger.Attributes;
using IO.Swagger.Models;
using MassTransit;
using LTS.DTOs;

namespace IO.Swagger.Controllers;

/// <summary>
/// 
/// </summary>
[ApiController]
[Route("/api")]
public class RoutingApiController : ControllerBase
{ 
    private readonly IRoutingService _routingService;
    private readonly IPublishEndpoint _publishEndpoint;

    /// <summary>
    /// 
    /// </summary>
    /// <param name="service"></param>
    /// <param name="endpoint"></param>
    public RoutingApiController(IRoutingService service, IPublishEndpoint endpoint)
    {
        _routingService = service;
        _publishEndpoint = endpoint;
    }

    /// <summary>
    /// Return processed route
    /// </summary>
    /// <remarks>Return the processed route data based on an earlier submission</remarks>
    /// <param name="body"></param>
    /// <param name="cc">ISO 3166-1 Alpha-2 compliant country code</param>
    /// <response code="200">accepted</response>
    /// <response code="400">invalid input</response>
    [HttpPost]
    [Route("/return-processed")]
    [SwaggerOperation("StoreProcessed")]
    public async Task<IActionResult> StoreProcessed([FromBody]Route body, [FromQuery][Required()][RegularExpression("[A-Z]{2}")]string cc)
    {
        try
        {
            Console.WriteLine("Processed results from: " + cc);
            Console.WriteLine("ID = " + body.Id + " -- " + " price total =  " + body.PriceTotal + " -- " + "Count segments = " + body.Segments.Count);
            await _routingService.ReturnProcessed(body);
            return Ok("Return response Processed!");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error message:");
            Console.WriteLine(ex.Message);
            return BadRequest(ex.Message);
        }
    }

    /// <summary>
    /// Submit route
    /// </summary>
    /// <remarks>Submit raw route data to be processed by another country and returned at a later time</remarks>
    /// <param name="body"></param>
    /// <param name="cc">ISO 3166-1 Alpha-2 compliant country code</param>
    /// <response code="200">accepted</response>
    /// <response code="400">invalid input</response>
    [HttpPost]
    [Route("/submit-raw")]
    [SwaggerOperation("SubmitRaw")]
    public async Task<IActionResult> SubmitRaw([FromBody]RawRoute body, [FromQuery][Required()][RegularExpression("[aA-zZ]{2}")]string cc)
    {
        try
        {
            Console.WriteLine(body);
            Console.WriteLine(cc);
            await _routingService.Routing(cc, body);
            return Ok("Coordinates received succesfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error message:");
            Console.WriteLine(ex.Message);
            return BadRequest(ex.Message);
        }
    }
}